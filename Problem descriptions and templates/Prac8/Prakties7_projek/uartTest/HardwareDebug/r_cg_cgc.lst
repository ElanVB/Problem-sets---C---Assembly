   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_uart2RxBuf,16,1
  28                             		.comm	_uart2RxCnt,2,2
  29                             		.comm	_uart2RxFlag,1,1
  30                             		.comm	_uart2TxBuf,16,1
  31                             		.comm	_uart2TxCnt,2,2
  32                             		.comm	_uart2TxFlag,1,1
  33                             		.comm	_uart2RxErrFlag,1,1
  34                             		.comm	_uart2RxOvrFlag,1,1
  35                             		.comm	_uart2Status,2,2
  36                             		.local	_sendHelloFlag
  37                             		.comm	_sendHelloFlag,2,2
  38                             		.global	_sendHello
  40                             	_sendHello:
  41                             	.LFB0:
  42                             		.file 1 "../src/r_main.c"
   1:../src/r_main.c **** /**************************************************************************************************
   2:../src/r_main.c ****  * DISCLAIMER
   3:../src/r_main.c ****  * This software is supplied by Renesas Electronics Corporation and is only
   4:../src/r_main.c ****  * intended for use with Renesas products. No other uses are authorized. This
   5:../src/r_main.c ****  * software is owned by Renesas Electronics Corporation and is protected under
   6:../src/r_main.c ****  * all applicable laws, including copyright laws.
   7:../src/r_main.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   8:../src/r_main.c ****  * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT
   9:../src/r_main.c ****  * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
  10:../src/r_main.c ****  * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
  11:../src/r_main.c ****  * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
  12:../src/r_main.c ****  * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
  13:../src/r_main.c ****  * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR
  14:../src/r_main.c ****  * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE
  15:../src/r_main.c ****  * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  16:../src/r_main.c ****  * Renesas reserves the right, without notice, to make changes to this software
  17:../src/r_main.c ****  * and to discontinue the availability of this software.  By using this software,
  18:../src/r_main.c ****  * you agree to the additional terms and conditions found by accessing the
  19:../src/r_main.c ****  * following link:
  20:../src/r_main.c ****  * http://www.renesas.com/disclaimer
  21:../src/r_main.c ****  *
  22:../src/r_main.c ****  * Copyright (C) 2011, 2014 Renesas Electronics Corporation. All rights reserved.
  23:../src/r_main.c ****  **************************************************************************************************
  24:../src/r_main.c **** 
  25:../src/r_main.c **** /**************************************************************************************************
  26:../src/r_main.c ****  * File Name    : r_main.c
  27:../src/r_main.c ****  * Version      : CodeGenerator for RL78/G13 V2.02.00.02 [11 Feb 2014]
  28:../src/r_main.c ****  * Device(s)    : R5F100LE
  29:../src/r_main.c ****  * Tool-Chain   : GCCRL78
  30:../src/r_main.c ****  * Description  : This file implements main function.
  31:../src/r_main.c ****  * Creation Date: 2014/10/03
  32:../src/r_main.c ****  **************************************************************************************************
  33:../src/r_main.c **** 
  34:../src/r_main.c **** /**************************************************************************************************
  35:../src/r_main.c **** Includes
  36:../src/r_main.c ****  **************************************************************************************************
  37:../src/r_main.c **** #include "r_cg_macrodriver.h"
  38:../src/r_main.c **** #include "r_cg_cgc.h"
  39:../src/r_main.c **** #include "r_cg_port.h"
  40:../src/r_main.c **** #include "r_cg_serial.h"
  41:../src/r_main.c **** /* Start user code for include. Do not edit comment generated here */
  42:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_main.c **** #include "r_cg_userdefine.h"
  44:../src/r_main.c **** 
  45:../src/r_main.c **** /**************************************************************************************************
  46:../src/r_main.c **** Global variables and functions
  47:../src/r_main.c ****  **************************************************************************************************
  48:../src/r_main.c **** /* Start user code for global. Do not edit comment generated here */
  49:../src/r_main.c **** 
  50:../src/r_main.c **** uint8_t uart2RxBuf[RX_BUF_LEN];
  51:../src/r_main.c **** uint16_t uart2RxCnt;
  52:../src/r_main.c **** uint8_t uart2RxFlag;
  53:../src/r_main.c **** uint8_t uart2TxBuf[TX_BUF_LEN];
  54:../src/r_main.c **** uint16_t uart2TxCnt;
  55:../src/r_main.c **** uint8_t uart2TxFlag;
  56:../src/r_main.c **** uint8_t	uart2RxErrFlag;	// UART2 Receive Error Flag
  57:../src/r_main.c **** uint8_t uart2RxOvrFlag;	// UART2 Receive Overrun Flag
  58:../src/r_main.c **** MD_STATUS uart2Status;
  59:../src/r_main.c **** 
  60:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  61:../src/r_main.c **** void R_MAIN_UserInit(void);
  62:../src/r_main.c **** void sendHello();
  63:../src/r_main.c **** 
  64:../src/r_main.c **** static int sendHelloFlag = 0;
  65:../src/r_main.c **** void sendHello()
  66:../src/r_main.c **** {
  43                             		.loc 1 66 0
  67:../src/r_main.c **** 	uart2TxBuf[0] = 'H';
  44                             		.loc 1 67 0
  45 0000 CF 00 00 48             		mov	!_uart2TxBuf, #72
  68:../src/r_main.c **** 	uart2TxBuf[1] = 'e';
  46                             		.loc 1 68 0
  47 0004 CF 00 00 65             		mov	!_uart2TxBuf+1, #101
  69:../src/r_main.c **** 	uart2TxBuf[2] = 'l';
  48                             		.loc 1 69 0
  49 0008 CF 00 00 6C             		mov	!_uart2TxBuf+2, #108
  70:../src/r_main.c **** 	uart2TxBuf[3] = 'l';
  50                             		.loc 1 70 0
  51 000c CF 00 00 6C             		mov	!_uart2TxBuf+3, #108
  71:../src/r_main.c **** 	uart2TxBuf[4] = 'o';
  52                             		.loc 1 71 0
  53 0010 CF 00 00 6F             		mov	!_uart2TxBuf+4, #111
  72:../src/r_main.c **** 
  73:../src/r_main.c **** 	return;
  54                             		.loc 1 73 0
  55 0014 00                      		nop
  74:../src/r_main.c **** }
  56                             		.loc 1 74 0
  57 0015 D7                      		ret
  58                             	.LFE0:
  60                             		.global	_main
  62                             	_main:
  63                             	.LFB1:
  75:../src/r_main.c **** /**************************************************************************************************
  76:../src/r_main.c ****  * Function Name: main
  77:../src/r_main.c ****  * Description  : This function implements main function.
  78:../src/r_main.c ****  * Arguments    : None
  79:../src/r_main.c ****  * Return Value : None
  80:../src/r_main.c ****  **************************************************************************************************
  81:../src/r_main.c **** void main(void)
  82:../src/r_main.c **** {
  64                             		.loc 1 82 0
  65                             		; start of function
  66                             		; outgoing: 4 bytes
  67 0016 20 04                   		subw	sp, #4
  68                             	.LCFI0:
  83:../src/r_main.c **** 	R_MAIN_UserInit();
  69                             		.loc 1 83 0
  70 0018 FC 00 00 00             		call	!!%code(_R_MAIN_UserInit)
  84:../src/r_main.c **** 	/* Start user code. Do not edit comment generated here */
  85:../src/r_main.c **** 
  86:../src/r_main.c **** 	//Create and initialize the UART
  87:../src/r_main.c **** 	R_UART2_Create();
  71                             		.loc 1 87 0
  72 001c FC 00 00 00             		call	!!%code(_R_UART2_Create)
  88:../src/r_main.c **** 	R_UART2_Start();
  73                             		.loc 1 88 0
  74 0020 FC 00 00 00             		call	!!%code(_R_UART2_Start)
  89:../src/r_main.c **** 	uart2Status = R_UART2_Receive(&uart2RxBuf[0],1);	// Prime UART2 Rx
  75                             		.loc 1 89 0
  76 0024 30 00 00                		movw	ax, #_uart2RxBuf
  77 0027 B8 00                   		movw	[sp], ax
  78 0029 E6                      		onew	ax
  79 002a B8 02                   		movw	[sp+2], ax
  80 002c FC 00 00 00             		call	!!%code(_R_UART2_Receive)
  81 0030 AD F0                   		movw	ax, r8
  82 0032 BF 00 00                		movw	!_uart2Status, ax
  83                             	.L11:
  90:../src/r_main.c **** 
  91:../src/r_main.c **** 	while (1U)
  92:../src/r_main.c **** 	{
  93:../src/r_main.c **** 		sendHelloFlag = 0;
  84                             		.loc 1 93 0
  85 0035 F6                      		clrw	ax
  86 0036 BF 00 00                		movw	!_sendHelloFlag, ax
  94:../src/r_main.c **** 
  95:../src/r_main.c **** 		//Check if byte received on UART
  96:../src/r_main.c **** 		if (uart2RxFlag)
  87                             		.loc 1 96 0
  88 0039 8F 00 00                		mov	a, !_uart2RxFlag
  89 003c 9D F0                   		mov	r8, a
  90 003e D4 F0                   		cmp0	r8 
  91 0040 61 F8                   		sknz 
  92 0042 EC E7 00 00             		br	!!.L4
  97:../src/r_main.c **** 		{
  98:../src/r_main.c **** 			// clear rx flag
  99:../src/r_main.c **** 			uart2RxFlag = 0U;
  93                             		.loc 1 99 0
  94 0046 F5 00 00                		clrb	!_uart2RxFlag
 100:../src/r_main.c **** 
 101:../src/r_main.c **** 			if(uart2RxBuf[0] == 'l')
  95                             		.loc 1 101 0
  96 0049 8F 00 00                		mov	a, !_uart2RxBuf
  97 004c 9D F0                   		mov	r8, a
  98 004e 4A F0 6C                		cmp	r8, #108 
  99 0051 61 E8                   		skz 
 100 0053 EC 7A 00 00             		br	!!.L5
 102:../src/r_main.c **** 				P7=(P7^0b10000000);
 101                             		.loc 1 102 0
 102 0057 C9 F0 07 FF             		movw	r8, #-249
 103 005b C9 F2 07 FF             		movw	r10, #-249
 104 005f AD F2                   		movw	ax, r10
 105 0061 BD F4                   		movw	r12, ax
 106 0063 FA F4                   		movw	hl, r12
 107 0065 8B                      		mov	a, [hl]
 108 0066 9D F2                   		mov	r10, a
 109 0068 7A F2 80                		xor	r10, #-128
 110 006b AD F0                   		movw	ax, r8
 111 006d BD F4                   		movw	r12, ax
 112 006f DA F4                   		movw	bc, r12
 113 0071 8D F2                   		mov	a, r10
 114 0073 48 00 00                		mov	[bc], a
 115 0076 EC 90 00 00             		br	!!.L6
 116                             	.L5:
 103:../src/r_main.c **** 			else if(uart2RxBuf[0] == 'h')
 117                             		.loc 1 103 0
 118 007a 8F 00 00                		mov	a, !_uart2RxBuf
 119 007d 9D F0                   		mov	r8, a
 120 007f 4A F0 68                		cmp	r8, #104 
 121 0082 61 E8                   		skz 
 122 0084 EC 90 00 00             		br	!!.L6
 104:../src/r_main.c **** 			{
 105:../src/r_main.c **** 				sendHello();
 123                             		.loc 1 105 0
 124 0088 FC 00 00 00             		call	!!%code(_sendHello)
 106:../src/r_main.c **** 				sendHelloFlag = 1;
 125                             		.loc 1 106 0
 126 008c E6                      		onew	ax
 127 008d BF 00 00                		movw	!_sendHelloFlag, ax
 128                             	.L6:
 107:../src/r_main.c **** 			}
 108:../src/r_main.c **** 
 109:../src/r_main.c **** 			if(!sendHelloFlag)
 129                             		.loc 1 109 0
 130 0090 AF 00 00                		movw	ax, !_sendHelloFlag
 131 0093 BD F0                   		movw	r8, ax
 132 0095 44 00 00                		cmpw	ax, #0 
 133 0098 61 E8                   		skz 
 134 009a EC AA 00 00             		br	!!.L7
 110:../src/r_main.c **** 			{
 111:../src/r_main.c **** 				//Echo back one higher character
 112:../src/r_main.c **** 				uart2TxBuf[0] = uart2RxBuf[0]+1;
 135                             		.loc 1 112 0
 136 009e 8F 00 00                		mov	a, !_uart2RxBuf
 137 00a1 9D F0                   		mov	r8, a
 138 00a3 A4 F0                   		inc	r8
 139 00a5 8D F0                   		mov	a, r8
 140 00a7 9F 00 00                		mov	!_uart2TxBuf, a
 141                             	.L7:
 113:../src/r_main.c **** 			}
 114:../src/r_main.c **** 			//Send TX buffer, and specify how many characters to write
 115:../src/r_main.c **** 			uart2Status = R_UART2_Send(uart2TxBuf, ((sendHelloFlag) ? 5 : 1));
 142                             		.loc 1 115 0
 143 00aa AF 00 00                		movw	ax, !_sendHelloFlag
 144 00ad BD F0                   		movw	r8, ax
 145 00af 44 00 00                		cmpw	ax, #0 
 146 00b2 61 F8                   		sknz 
 147 00b4 EC C0 00 00             		br	!!.L8
 148                             		.loc 1 115 0 is_stmt 0 discriminator 1
 149 00b8 C9 F0 05 00             		movw	r8, #5
 150 00bc EC C4 00 00             		br	!!.L9
 151                             	.L8:
 152                             		.loc 1 115 0 discriminator 2
 153 00c0 C9 F0 01 00             		movw	r8, #1
 154                             	.L9:
 155                             		.loc 1 115 0 discriminator 3
 156 00c4 30 00 00                		movw	ax, #_uart2TxBuf
 157 00c7 B8 00                   		movw	[sp], ax
 158 00c9 AD F0                   		movw	ax, r8
 159 00cb B8 02                   		movw	[sp+2], ax
 160 00cd FC 00 00 00             		call	!!%code(_R_UART2_Send)
 161 00d1 AD F0                   		movw	ax, r8
 162 00d3 BF 00 00                		movw	!_uart2Status, ax
 116:../src/r_main.c **** 
 117:../src/r_main.c **** 			// Prime UART2 Rx
 118:../src/r_main.c **** 			uart2Status = R_UART2_Receive(uart2RxBuf, 1);
 163                             		.loc 1 118 0 is_stmt 1 discriminator 3
 164 00d6 30 00 00                		movw	ax, #_uart2RxBuf
 165 00d9 B8 00                   		movw	[sp], ax
 166 00db E6                      		onew	ax
 167 00dc B8 02                   		movw	[sp+2], ax
 168 00de FC 00 00 00             		call	!!%code(_R_UART2_Receive)
 169 00e2 AD F0                   		movw	ax, r8
 170 00e4 BF 00 00                		movw	!_uart2Status, ax
 171                             	.L4:
 119:../src/r_main.c **** 		}
 120:../src/r_main.c **** 
 121:../src/r_main.c **** 
 122:../src/r_main.c **** 		//If a character has been transmitted
 123:../src/r_main.c **** 		if (uart2TxFlag)
 172                             		.loc 1 123 0
 173 00e7 8F 00 00                		mov	a, !_uart2TxFlag
 174 00ea 9D F0                   		mov	r8, a
 175 00ec D4 F0                   		cmp0	r8 
 176 00ee 61 F8                   		sknz 
 177 00f0 EC FB 00 00             		br	!!.L10
 124:../src/r_main.c **** 		{
 125:../src/r_main.c **** 			// End of UART2 transmit
 126:../src/r_main.c **** 			uart2TxFlag = 0U;   // clear tx flag
 178                             		.loc 1 126 0
 179 00f4 F5 00 00                		clrb	!_uart2TxFlag
 127:../src/r_main.c **** 		}
 128:../src/r_main.c **** 	}
 180                             		.loc 1 128 0
 181 00f7 EC 35 00 00             		br	!!.L11
 182                             	.L10:
 183 00fb EC 35 00 00             		br	!!.L11
 184                             	.LFE1:
 186                             		.global	_R_MAIN_UserInit
 188                             	_R_MAIN_UserInit:
 189                             	.LFB2:
 129:../src/r_main.c **** 	/* End user code. Do not edit comment generated here */
 130:../src/r_main.c **** }
 131:../src/r_main.c **** 
 132:../src/r_main.c **** 
 133:../src/r_main.c **** /**************************************************************************************************
 134:../src/r_main.c ****  * Function Name: R_MAIN_UserInit
 135:../src/r_main.c ****  * Description  : This function adds user code before implementing main function.
 136:../src/r_main.c ****  * Arguments    : None
 137:../src/r_main.c ****  * Return Value : None
 138:../src/r_main.c ****  **************************************************************************************************
 139:../src/r_main.c **** void R_MAIN_UserInit(void)
 140:../src/r_main.c **** {
 190                             		.loc 1 140 0
 141:../src/r_main.c **** 	/* Start user code. Do not edit comment generated here */
 142:../src/r_main.c **** 	EI();
 191                             		.loc 1 142 0
 192                             	 ; 142 "../src/r_main.c" 1
 193 00ff 71 7A FA                		ei
 194                             	 ; 0 "" 2
 143:../src/r_main.c **** 	//TODO: Initialize LED outputs here
 144:../src/r_main.c **** 
 145:../src/r_main.c **** 	/* End user code. Do not edit comment generated here */
 146:../src/r_main.c **** }
 195                             		.loc 1 146 0
 196 0102 D7                      		ret
 197                             	.LFE2:
 245                             	.Letext0:
 246                             		.file 2 "../src/iodefine.h"
 247                             		.file 3 "../src/r_cg_macrodriver.h"
