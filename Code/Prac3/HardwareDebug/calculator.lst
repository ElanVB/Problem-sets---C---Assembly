   1                             	# 1 "../src/reset_program.asm"
   1                             	/***************************************************************/
   0                             	
   0                             	
   2                             	/*                                                             */
   3                             	/*      PROJECT NAME :  Prac3                                  */
   4                             	/*      FILE         :  reset_program.asm                      */
   5                             	/*      DESCRIPTION  :  Reset Program                          */
   6                             	/*      CPU SERIES   :  RL78 - G13                             */
   7                             	/*      CPU TYPE     :  R5F100LE                               */
   8                             	/*                                                             */
   9                             	/*      This file is generated by e2 studio.                   */
  10                             	/*                                                             */
  11                             	/***************************************************************/                            
  12                             	                                                                                   
  13                             	
  14                             	/************************************************************************/
  15                             	/*    File Version: V1.00                                               */
  16                             	/*    Date Generated: 19/09/2013                                        */
  17                             	/************************************************************************/
  18                             	
  19                             	    /*reset_program.asm*/
  20                             	
  21                             	    .list
  22                             	
  23                             	    .global _PowerON_Reset  /*! global Start routine */
  24 0000 00 00                   	    .short _PowerON_Reset
  25                             	    
  26                             	#ifdef CPPAPP    
  27                             	___dso_handle:
  28                             	    .global ___dso_handle
  29                             	#endif    
  30                             	
  31                             	
  32                             	    .extern _HardwareSetup /*! external Sub-routine to initialise Hardware*/
  33                             	    .extern _data
  34                             	    .extern _mdata
  35                             	    .extern _ebss
  36                             	    .extern _bss
  37                             	    
  38                             	    .extern _edata
  39                             	    .extern _main 
  40                             	    .extern _stack
  41                             	    .extern _exit
  42                             	
  43                             	    /*  ;; HL = start of list
  44                             	        ;; DE = end of list
  45                             	        ;; BC = step direction (+2 or -2)
  46                             	    */
  47                             	    
  48                             	    .text
  49                             	
  50                             	/* call to _PowerON_Reset */
  51                             	_PowerON_Reset:
  52                             	/* initialise user stack pointer */
  53 0002 CB F8 00 00             	    movw sp,#_stack /* Set stack pointer */
  54                             	
  55                             	
  56                             	/* load data section from ROM to RAM */    
  57                             	;; block move to initialize .data
  58                             	
  59                             	        ;; we're copying from 00:[_romdatastart] to 0F:[_datastart]
  60                             	        ;; and our data is not in the mirrored area.
  61 0006 41 00                   	    mov     es, #0
  62                             	#ifndef __RL78_G10__
  63 0008 61 CF                   	    sel     rb0         /*  ;;bank 0 */
  64                             	#endif    
  65 000a 34 00 00                	    movw    de, #_mdata    /* src ROM address of data section in de */
  66 000d 36 00 00                	    movw    hl, #_data     /* dest start RAM address of data section in hl */
  67                             	        
  68                             	#ifndef __RL78_G10__
  69 0010 61 DF                   	    sel     rb1              /* bank 1 */
  70 0012 36 00 00                	    movw    hl, #_data     /* dest start RAM address of data section in hl */
  71                             	#endif
  72 0015 30 00 00                	    movw    ax, #_edata   /*    ;; size of romdata section in ax */
  73 0018 27                      	    subw    ax,hl          /* store data size */
  74 0019 31 1E                   	    shrw    ax,1
  75                             	1:
  76 001b 44 00 00                	    cmpw    ax, #0           /* check if end of data */
  77 001e DD 0E                   	    bz      $1f
  78 0020 B1                      	    decw    ax
  79                             	#ifdef __RL78_G10__
  80                             	    movw     bc, ax            /* save ax value in bc */
  81                             	#endif
  82                             	    
  83                             	#ifndef __RL78_G10__
  84 0021 61 CF                   	    sel     rb0             /* bank 0 */
  85                             	#endif
  86 0023 11 A9                   	    movw    ax, es:[de]
  87 0025 BB                      	    movw    [hl], ax
  88 0026 A5                      	    incw    de
  89 0027 A5                      	    incw    de
  90 0028 A7                      	    incw    hl
  91 0029 A7                      	    incw    hl
  92                             	#ifndef __RL78_G10__
  93 002a 61 DF                   	    sel     rb1         /* bank 1  -  compare and decrement*/
  94                             	#endif
  95                             	
  96                             	#ifdef __RL78_G10__
  97                             	    movw     ax, bc            /* restore ax value */
  98                             	#endif
  99 002c EF ED                   	    br      $1b
 100                             	1:
 101                             	
 102                             	    
 103                             	/* bss initialisation : zero out bss */
 104                             	#ifndef __RL78_G10__
 105 002e 61 CF                   	    sel     rb0         /* bank 0 */
 106 0030 36 00 00                	    movw    hl, #_bss      /* store the start address of bss in hl */
 107 0033 30 00 00                	    movw    ax, #0        /* load AX reg with zero */
 108 0036 61 DF                   	    sel     rb1         /* bank 1 */
 109 0038 30 00 00                	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
 110 003b 27                      	    subw    ax,hl ;; store data size
 111 003c 31 1E                   	    shrw    ax,1
 112                             	#endif
 113                             	
 114                             	#ifdef __RL78_G10__
 115                             	    movw    hl, #_bss      /* store the start address of bss in hl */
 116                             	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
 117                             	    subw    ax,hl ;; store data size
 118                             	    shrw    ax,1
 119                             	#endif    
 120                             	    
 121                             	    
 122                             	1:
 123 003e 44 00 00                	    cmpw    ax, #0
 124 0041 DD 0A                   	    bz      $1f
 125 0043 B1                      	    decw    ax
 126                             	#ifdef __RL78_G10__    
 127                             	    movw     bc, ax        /* save ax value in bc */
 128                             	    movw    ax, #0
 129                             	#endif    
 130                             	#ifndef __RL78_G10__        
 131 0044 61 CF                   	    sel     rb0         /* bank 0 */
 132                             	#endif        
 133 0046 BB                      	    movw    [hl], ax
 134 0047 A7                      	    incw    hl
 135 0048 A7                      	    incw    hl
 136                             	#ifdef __RL78_G10__        
 137                             	    movw    ax, bc        /* restore ax value */
 138                             	#endif        
 139                             	#ifndef __RL78_G10__        
 140 0049 61 DF                   	    sel     rb1
 141                             	#endif    
 142 004b EF F1                   	    br      $1b
 143                             	1:
 144                             	#ifndef __RL78_G10__
 145 004d 61 CF                   	    sel     rb0             /* bank 0 */
 146                             	#endif
 147                             	    
 148                             	/* call the hardware initialiser */
 149 004f FC 00 00 00             	    call    !!_HardwareSetup
 150 0053 00                      	    nop
 151                             	
 152                             	/* start user program */
 153                             	
 154 0054 30 00 00                	    movw    ax, #0
 155 0057 C1                      	    push    ax      /* envp */
 156 0058 C1                      	    push    ax      /* argv */
 157 0059 C1                      	    push    ax      /* argc */
 158 005a FC 00 00 00             	    call    !!_main
 159                             	
 160                             	
 161                             	/* call to exit*/
 162                             	_exit:
 163 005e EF FE                   	     br    $_exit
 164                             	
 165                             	    .end             
