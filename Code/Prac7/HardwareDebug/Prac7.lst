   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_main
  29                             	_main:
  30                             	.LFB0:
  31                             		.file 1 "../src/Prac7.c"
   1:../src/Prac7.c **** /***************************************************************/
   2:../src/Prac7.c **** /*                                                             */
   3:../src/Prac7.c **** /*      PROJECT NAME :  Prac7                                  */
   4:../src/Prac7.c **** /*      FILE         :  Prac7.c                                */
   5:../src/Prac7.c **** /*      DESCRIPTION  :  Main Program                           */
   6:../src/Prac7.c **** /*      CPU SERIES   :  RL78 - G13                             */
   7:../src/Prac7.c **** /*      CPU TYPE     :  R5F100LE                               */
   8:../src/Prac7.c **** /*                                                             */
   9:../src/Prac7.c **** /*      This file is generated by e2 studio.                   */
  10:../src/Prac7.c **** /*                                                             */
  11:../src/Prac7.c **** /***************************************************************/                                  
  12:../src/Prac7.c **** 
  13:../src/Prac7.c **** 
  14:../src/Prac7.c **** /************************************************************************/
  15:../src/Prac7.c **** /*    File Version: V1.00                                               */
  16:../src/Prac7.c **** /*    Date Generated: 10/09/2013                                        */
  17:../src/Prac7.c **** /************************************************************************/
  18:../src/Prac7.c **** 
  19:../src/Prac7.c **** #include "iodefine.h"
  20:../src/Prac7.c **** 
  21:../src/Prac7.c **** #ifdef CPPAPP
  22:../src/Prac7.c **** //Initialize global constructors
  23:../src/Prac7.c **** extern "C" void __main()
  24:../src/Prac7.c **** {
  25:../src/Prac7.c **** 	static int initialized;
  26:../src/Prac7.c **** 	if (! initialized)
  27:../src/Prac7.c **** 	{
  28:../src/Prac7.c **** 		typedef void (*pfunc) ();
  29:../src/Prac7.c **** 		extern pfunc __ctors[];
  30:../src/Prac7.c **** 		extern pfunc __ctors_end[];
  31:../src/Prac7.c **** 		pfunc *p;
  32:../src/Prac7.c **** 
  33:../src/Prac7.c **** 		initialized = 1;
  34:../src/Prac7.c **** 		for (p = __ctors_end; p > __ctors; )
  35:../src/Prac7.c **** 			(*--p) ();
  36:../src/Prac7.c **** 
  37:../src/Prac7.c **** 	}
  38:../src/Prac7.c **** }
  39:../src/Prac7.c **** #endif 
  40:../src/Prac7.c **** 
  41:../src/Prac7.c **** #include "iodefine.h"
  42:../src/Prac7.c **** 
  43:../src/Prac7.c **** extern void toggleLED();
  44:../src/Prac7.c **** 
  45:../src/Prac7.c **** extern int calculateUniqueNumber(int, int, int, int, int, int, int, int);
  46:../src/Prac7.c **** extern int generate_checksum(char*);
  47:../src/Prac7.c **** extern int validate_checksum(int);
  48:../src/Prac7.c **** extern void bubble_sort(char*);
  49:../src/Prac7.c **** 
  50:../src/Prac7.c **** int calculate_unique_number_in_c(int, int, int, int, int, int, int, int);
  51:../src/Prac7.c **** int generate_checksum_in_c(char*);
  52:../src/Prac7.c **** int validate_checksum_in_c(int);
  53:../src/Prac7.c **** void bubble_sort_in_c(char*);
  54:../src/Prac7.c **** 
  55:../src/Prac7.c **** int main(void)
  56:../src/Prac7.c **** {
  32                             		.loc 1 56 0
  33                             		; start of function
  34                             		; locals: 16 bytes
  35 0000 20 10                   		subw	sp, #16
  36                             	.LCFI0:
  57:../src/Prac7.c **** 	// variable definitions
  58:../src/Prac7.c **** 	char studentNr[] = "18273645";
  37                             		.loc 1 58 0
  38 0002 51 31                   		mov	a, #49
  39 0004 98 01                   		mov	[sp+1], a
  40 0006 51 38                   		mov	a, #56
  41 0008 98 02                   		mov	[sp+2], a
  42 000a 51 32                   		mov	a, #50
  43 000c 98 03                   		mov	[sp+3], a
  44 000e 51 37                   		mov	a, #55
  45 0010 98 04                   		mov	[sp+4], a
  46 0012 51 33                   		mov	a, #51
  47 0014 98 05                   		mov	[sp+5], a
  48 0016 51 36                   		mov	a, #54
  49 0018 98 06                   		mov	[sp+6], a
  50 001a 51 34                   		mov	a, #52
  51 001c 98 07                   		mov	[sp+7], a
  52 001e 51 35                   		mov	a, #53
  53 0020 98 08                   		mov	[sp+8], a
  54 0022 F1                      		clrb	a
  55 0023 98 09                   		mov	[sp+9], a
  59:../src/Prac7.c **** 	int uniqueNumber = 0;
  56                             		.loc 1 59 0
  57 0025 F6                      		clrw	ax
  58 0026 B8 0E                   		movw	[sp+14], ax
  60:../src/Prac7.c **** 	int checksum = 0;
  59                             		.loc 1 60 0
  60 0028 F6                      		clrw	ax
  61 0029 B8 0C                   		movw	[sp+12], ax
  61:../src/Prac7.c **** 	int valid = 0;
  62                             		.loc 1 61 0
  63 002b F6                      		clrw	ax
  64 002c B8 0A                   		movw	[sp+10], ax
  62:../src/Prac7.c **** 
  63:../src/Prac7.c **** 	// set up LED pin as an output
  64:../src/Prac7.c **** 	PM7 = 0b01111111;
  65                             		.loc 1 64 0
  66 002e C9 F0 27 FF             		movw	r8, #-217
  67 0032 AD F0                   		movw	ax, r8
  68 0034 BD F2                   		movw	r10, ax
  69 0036 DA F2                   		movw	bc, r10
  70 0038 51 7F                   		mov	a, #127
  71 003a 48 00 00                		mov	[bc], a
  72                             	.L2:
  65:../src/Prac7.c **** 
  66:../src/Prac7.c **** 	// Toggle LED, execute function, repeat indefinitely. This will cause the LED to flash. Measure th
  67:../src/Prac7.c **** 	while (1)
  68:../src/Prac7.c **** 	{
  69:../src/Prac7.c **** 		// toggle the LED so that we can see the timing
  70:../src/Prac7.c **** 
  71:../src/Prac7.c **** 		//TODO: enable the function we want to time by uncommenting the appropriate lines
  72:../src/Prac7.c **** 		/*uniqueNumber = calculateUniqueNumber(1, 8, 2, 7, 3, 6, 4, 5);*/
  73:../src/Prac7.c **** 		toggleLED();
  73                             		.loc 1 73 0 discriminator 1
  74 003d FC 00 00 00             		call	!!%code(_toggleLED)
  74:../src/Prac7.c **** 
  75:../src/Prac7.c **** 
  76:../src/Prac7.c **** 		/*checksum = generate_checksum(studentNr);
  77:../src/Prac7.c **** 		toggleLED();*/
  78:../src/Prac7.c **** 
  79:../src/Prac7.c **** 
  80:../src/Prac7.c **** 		/*valid = validate_checksum(121);
  81:../src/Prac7.c **** 		toggleLED();*/
  82:../src/Prac7.c **** 
  83:../src/Prac7.c **** 
  84:../src/Prac7.c **** 		/*bubble_sort(studentNr);
  85:../src/Prac7.c **** 		toggleLED();*/
  86:../src/Prac7.c **** 
  87:../src/Prac7.c **** 
  88:../src/Prac7.c **** 		/*calculate_unique_number_in_c(1, 8, 2, 7, 3, 6, 4, 5);
  89:../src/Prac7.c **** 		toggleLED();*/
  90:../src/Prac7.c **** 
  91:../src/Prac7.c **** 
  92:../src/Prac7.c **** 		/*generate_checksum_in_c(studentNr);
  93:../src/Prac7.c **** 		toggleLED();*/
  94:../src/Prac7.c **** 
  95:../src/Prac7.c **** 
  96:../src/Prac7.c **** 		/*validate_checksum_in_c(121);
  97:../src/Prac7.c **** 		toggleLED();*/
  98:../src/Prac7.c **** 
  99:../src/Prac7.c **** 
 100:../src/Prac7.c **** 		/*bubble_sort_in_c(studentNr);
 101:../src/Prac7.c **** 		toggleLED();*/
 102:../src/Prac7.c **** 	}
  75                             		.loc 1 102 0 discriminator 1
  76 0041 EC 3D 00 00             		br	!!.L2
  77                             	.LFE0:
  79                             		.global	_calculate_unique_number_in_c
  81                             	_calculate_unique_number_in_c:
  82                             	.LFB1:
 103:../src/Prac7.c **** }
 104:../src/Prac7.c **** 
 105:../src/Prac7.c **** 
 106:../src/Prac7.c **** // Student number functions
 107:../src/Prac7.c **** int calculate_unique_number_in_c(int a, int b, int c, int d, int e, int f, int g, int h)
 108:../src/Prac7.c **** {
  83                             		.loc 1 108 0
  84                             		; start of function
  85                             		; locals: 16 bytes
  86                             		; outgoing: 2 bytes
  87 0045 20 12                   		subw	sp, #18
  88                             	.LCFI1:
 109:../src/Prac7.c **** 	//TODO: write your code here
 110:../src/Prac7.c **** 	int smallTot = 0, bigTot = 0, Tot = 0;
  89                             		.loc 1 110 0
  90 0047 F6                      		clrw	ax
  91 0048 B8 10                   		movw	[sp+16], ax
  92 004a F6                      		clrw	ax
  93 004b B8 0E                   		movw	[sp+14], ax
  94 004d F6                      		clrw	ax
  95 004e B8 0C                   		movw	[sp+12], ax
 111:../src/Prac7.c **** 	char num[] = {a, b, c, d, e, f, g, h};
  96                             		.loc 1 111 0
  97 0050 88 16                   		mov	a, [sp+22]
  98 0052 9D F0                   		mov	r8, a
  99 0054 98 04                   		mov	[sp+4], a
 100 0056 88 18                   		mov	a, [sp+24]
 101 0058 9D F0                   		mov	r8, a
 102 005a 98 05                   		mov	[sp+5], a
 103 005c 88 1A                   		mov	a, [sp+26]
 104 005e 9D F0                   		mov	r8, a
 105 0060 98 06                   		mov	[sp+6], a
 106 0062 88 1C                   		mov	a, [sp+28]
 107 0064 9D F0                   		mov	r8, a
 108 0066 98 07                   		mov	[sp+7], a
 109 0068 88 1E                   		mov	a, [sp+30]
 110 006a 9D F0                   		mov	r8, a
 111 006c 98 08                   		mov	[sp+8], a
 112 006e 88 20                   		mov	a, [sp+32]
 113 0070 9D F0                   		mov	r8, a
 114 0072 98 09                   		mov	[sp+9], a
 115 0074 88 22                   		mov	a, [sp+34]
 116 0076 9D F0                   		mov	r8, a
 117 0078 98 0A                   		mov	[sp+10], a
 118 007a 88 24                   		mov	a, [sp+36]
 119 007c 9D F0                   		mov	r8, a
 120 007e 98 0B                   		mov	[sp+11], a
 112:../src/Prac7.c **** 	bubble_sort_in_c(num);
 121                             		.loc 1 112 0
 122 0080 C9 F0 12 00             		movw	r8, #18
 123 0084 AE F8                   		movw	ax, sp
 124 0086 BD F0                   		movw	r8, ax
 125 0088 04 12 00                		addw	ax, #18
 126 008b BD F0                   		movw	r8, ax
 127 008d 04 F2 FF                		addw	ax, #-14
 128 0090 B8 00                   		movw	[sp], ax
 129 0092 FC 00 00 00             		call	!!%code(_bubble_sort_in_c)
 113:../src/Prac7.c **** 
 114:../src/Prac7.c **** 	smallTot = num[0] + num[1] + num[2] + num[3];
 130                             		.loc 1 114 0
 131 0096 88 04                   		mov	a, [sp+4]
 132 0098 9D F0                   		mov	r8, a
 133 009a 70                      		mov	x, a 
 134 009b 51 00                   		mov	a, #0
 135 009d BD F2                   		movw	r10, ax
 136 009f 88 05                   		mov	a, [sp+5]
 137 00a1 9D F0                   		mov	r8, a
 138 00a3 CD F1 00                		mov	r9, #0
 139 00a6 AD F2                   		movw	ax, r10
 140 00a8 06 F0                   		addw	ax, r8
 141 00aa BD F2                   		movw	r10, ax
 142 00ac 88 06                   		mov	a, [sp+6]
 143 00ae 9D F0                   		mov	r8, a
 144 00b0 CD F1 00                		mov	r9, #0
 145 00b3 AD F2                   		movw	ax, r10
 146 00b5 06 F0                   		addw	ax, r8
 147 00b7 BD F2                   		movw	r10, ax
 148 00b9 88 07                   		mov	a, [sp+7]
 149 00bb 9D F0                   		mov	r8, a
 150 00bd CD F1 00                		mov	r9, #0
 151 00c0 AD F2                   		movw	ax, r10
 152 00c2 06 F0                   		addw	ax, r8
 153 00c4 B8 10                   		movw	[sp+16], ax
 115:../src/Prac7.c **** 	bigTot = num[4] + num[5] + num[6] + num[7];
 154                             		.loc 1 115 0
 155 00c6 88 08                   		mov	a, [sp+8]
 156 00c8 9D F0                   		mov	r8, a
 157 00ca 70                      		mov	x, a 
 158 00cb 51 00                   		mov	a, #0
 159 00cd BD F2                   		movw	r10, ax
 160 00cf 88 09                   		mov	a, [sp+9]
 161 00d1 9D F0                   		mov	r8, a
 162 00d3 CD F1 00                		mov	r9, #0
 163 00d6 AD F2                   		movw	ax, r10
 164 00d8 06 F0                   		addw	ax, r8
 165 00da BD F2                   		movw	r10, ax
 166 00dc 88 0A                   		mov	a, [sp+10]
 167 00de 9D F0                   		mov	r8, a
 168 00e0 CD F1 00                		mov	r9, #0
 169 00e3 AD F2                   		movw	ax, r10
 170 00e5 06 F0                   		addw	ax, r8
 171 00e7 BD F2                   		movw	r10, ax
 172 00e9 88 0B                   		mov	a, [sp+11]
 173 00eb 9D F0                   		mov	r8, a
 174 00ed CD F1 00                		mov	r9, #0
 175 00f0 AD F2                   		movw	ax, r10
 176 00f2 06 F0                   		addw	ax, r8
 177 00f4 B8 0E                   		movw	[sp+14], ax
 116:../src/Prac7.c **** 
 117:../src/Prac7.c **** 	Tot = bigTot * smallTot;
 178                             		.loc 1 117 0
 179 00f6 A8 10                   		movw	ax, [sp+16]
 180 00f8 BD F2                   		movw	r10, ax
 181                             		; G13 mulhi macro r8 = [sp+14] * r10
 182 00fa 51 00                   		mov     a, #0x00
 183 00fc 9F E8 00                		mov     !0xf00e8, a     ; MDUC
 184 00ff A8 0E                   		movw    ax, [sp+14]
 185 0101 BE F0                   		movw    0xffff0, ax     ; MDAL
 186 0103 AD F2                   		movw    ax, r10
 187 0105 BE F2                   		movw    0xffff2, ax     ; MDAH
 188 0107 00                      		nop     ; mdb = mdal * mdah
 189 0108 AE F6                   		movw    ax, 0xffff6     ; MDBL
 190 010a BD F0                   		movw    r8, ax
 191                             	        ; end of mulhi macro
 192 010c AD F0                   		movw	ax, r8
 193 010e B8 0C                   		movw	[sp+12], ax
 118:../src/Prac7.c **** 	return Tot;
 194                             		.loc 1 118 0
 195 0110 BD F0                   		movw	r8, ax
 196 0112 B8 02                   		movw	[sp+2], ax
 197 0114 BD F0                   		movw	r8, ax
 119:../src/Prac7.c **** }
 198                             		.loc 1 119 0
 199 0116 10 12                   		addw	sp, #18
 200 0118 D7                      		ret
 201                             	.LFE1:
 203                             		.global	_generate_checksum_in_c
 205                             	_generate_checksum_in_c:
 206                             	.LFB2:
 120:../src/Prac7.c **** 
 121:../src/Prac7.c **** int generate_checksum_in_c(char* studentNumber)
 122:../src/Prac7.c **** {
 207                             		.loc 1 122 0
 208                             		; start of function
 209                             		; locals: 10 bytes
 210 0119 20 0A                   		subw	sp, #10
 211                             	.LCFI2:
 123:../src/Prac7.c **** 	//TODO: write your code here
 124:../src/Prac7.c **** 	int i;
 125:../src/Prac7.c **** 	int N = 8;
 212                             		.loc 1 125 0
 213 011b 30 08 00                		movw	ax, #8
 214 011e B8 04                   		movw	[sp+4], ax
 126:../src/Prac7.c **** 	int tot = 0;
 215                             		.loc 1 126 0
 216 0120 F6                      		clrw	ax
 217 0121 B8 06                   		movw	[sp+6], ax
 127:../src/Prac7.c **** 	int tempNum = 0;
 218                             		.loc 1 127 0
 219 0123 F6                      		clrw	ax
 220 0124 B8 02                   		movw	[sp+2], ax
 128:../src/Prac7.c **** 
 129:../src/Prac7.c **** 	for(i = 0; i < N; i++)
 221                             		.loc 1 129 0
 222 0126 F6                      		clrw	ax
 223 0127 B8 08                   		movw	[sp+8], ax
 224 0129 EC 72 01 00             		br	!!.L6
 225                             	.L7:
 130:../src/Prac7.c **** 	{
 131:../src/Prac7.c **** 		tempNum = studentNumber[i] - 48;
 226                             		.loc 1 131 0 discriminator 2
 227 012d A8 08                   		movw	ax, [sp+8]
 228 012f BD F0                   		movw	r8, ax
 229 0131 A8 0E                   		movw	ax, [sp+14]
 230 0133 06 F0                   		addw	ax, r8
 231 0135 BD F0                   		movw	r8, ax
 232 0137 BD F2                   		movw	r10, ax
 233 0139 FA F2                   		movw	hl, r10
 234 013b 8B                      		mov	a, [hl]
 235 013c 9D F0                   		mov	r8, a
 236 013e CD F1 00                		mov	r9, #0
 237 0141 AD F0                   		movw	ax, r8
 238 0143 04 D0 FF                		addw	ax, #-48
 239 0146 B8 02                   		movw	[sp+2], ax
 132:../src/Prac7.c **** 		tot += tempNum * (8 - i);
 240                             		.loc 1 132 0 discriminator 2
 241 0148 A8 08                   		movw	ax, [sp+8]
 242 014a 16                      		movw	hl, ax
 243 014b 30 08 00                		movw	ax, #8
 244 014e 27                      		subw	ax, hl
 245 014f BD F4                   		movw	r12, ax
 246 0151 A8 02                   		movw	ax, [sp+2]
 247 0153 BD F0                   		movw	r8, ax
 248                             		; G13 mulhi macro r10 = r12 * r8
 249 0155 51 00                   		mov     a, #0x00
 250 0157 9F E8 00                		mov     !0xf00e8, a     ; MDUC
 251 015a AD F4                   		movw    ax, r12
 252 015c BE F0                   		movw    0xffff0, ax     ; MDAL
 253 015e AD F0                   		movw    ax, r8
 254 0160 BE F2                   		movw    0xffff2, ax     ; MDAH
 255 0162 00                      		nop     ; mdb = mdal * mdah
 256 0163 AE F6                   		movw    ax, 0xffff6     ; MDBL
 257 0165 BD F2                   		movw    r10, ax
 258                             	        ; end of mulhi macro
 259 0167 A8 06                   		movw	ax, [sp+6]
 260 0169 06 F2                   		addw	ax, r10
 261 016b B8 06                   		movw	[sp+6], ax
 129:../src/Prac7.c **** 	for(i = 0; i < N; i++)
 262                             		.loc 1 129 0 discriminator 2
 263 016d A8 08                   		movw	ax, [sp+8]
 264 016f A1                      		incw	ax
 265 0170 B8 08                   		movw	[sp+8], ax
 266                             	.L6:
 129:../src/Prac7.c **** 	for(i = 0; i < N; i++)
 267                             		.loc 1 129 0 is_stmt 0 discriminator 1
 268 0172 A8 04                   		movw	ax, [sp+4]
 269 0174 BD F0                   		movw	r8, ax
 270 0176 A8 08                   		movw	ax, [sp+8]
 271 0178 46 F0                   		cmpw	ax, r8
 272 017a 71 FF                   		 xor1	CY, a.7
 273 017c 71 77 F1                		 xor1	CY, r9.7
 274 017f 61 D8                   		 sknc
 275 0181 EC 2D 01 00             		 br	!!.L7
 133:../src/Prac7.c **** 	}
 134:../src/Prac7.c **** 
 135:../src/Prac7.c **** 	return tot;
 276                             		.loc 1 135 0 is_stmt 1
 277 0185 A8 06                   		movw	ax, [sp+6]
 278 0187 BD F0                   		movw	r8, ax
 279 0189 B8 00                   		movw	[sp], ax
 280 018b BD F0                   		movw	r8, ax
 136:../src/Prac7.c **** }
 281                             		.loc 1 136 0
 282 018d 10 0A                   		addw	sp, #10
 283 018f D7                      		ret
 284                             	.LFE2:
 286                             		.global	___modhi3
 287                             		.global	_validate_checksum_in_c
 289                             	_validate_checksum_in_c:
 290                             	.LFB3:
 137:../src/Prac7.c **** 
 138:../src/Prac7.c **** int validate_checksum_in_c(int checksum)
 139:../src/Prac7.c **** {
 291                             		.loc 1 139 0
 292                             		; start of function
 293                             		; locals: 4 bytes
 294                             		; outgoing: 4 bytes
 295 0190 20 08                   		subw	sp, #8
 296                             	.LCFI3:
 140:../src/Prac7.c **** 	//TODO: write your code here
 141:../src/Prac7.c **** 	return (checksum % 11)? 0 : 1;
 297                             		.loc 1 141 0
 298 0192 A8 0C                   		movw	ax, [sp+12]
 299 0194 BD F0                   		movw	r8, ax
 300 0196 B8 00                   		movw	[sp], ax
 301 0198 30 0B 00                		movw	ax, #11
 302 019b B8 02                   		movw	[sp+2], ax
 303 019d FC 00 00 00             		call	!!___modhi3
 304 01a1 AD F0                   		movw	ax, r8
 305 01a3 B8 06                   		movw	[sp+6], ax
 306 01a5 E4 F0                   		oneb	r8
 307 01a7 A8 06                   		movw	ax, [sp+6]
 308 01a9 44 00 00                		cmpw	ax, #0
 309 01ac 61 F8                   		 sknz
 310 01ae EC B4 01 00             		 br	!!.L10
 311 01b2 F4 F0                   		clrb	r8
 312                             	.L10:
 313 01b4 8D F0                   		mov	a, r8
 314 01b6 70                      		mov	x, a 
 315 01b7 51 00                   		mov	a, #0
 316 01b9 B8 04                   		movw	[sp+4], ax
 317 01bb BD F0                   		movw	r8, ax
 142:../src/Prac7.c **** }
 318                             		.loc 1 142 0
 319 01bd 10 08                   		addw	sp, #8
 320 01bf D7                      		ret
 321                             	.LFE3:
 323                             		.global	_bubble_sort_in_c
 325                             	_bubble_sort_in_c:
 326                             	.LFB4:
 143:../src/Prac7.c **** 
 144:../src/Prac7.c **** void bubble_sort_in_c(char* studentNumber)
 145:../src/Prac7.c **** {
 327                             		.loc 1 145 0
 328                             		; start of function
 329                             		; locals: 6 bytes
 330                             		; outgoing: 6 bytes
 331 01c0 20 0C                   		subw	sp, #12
 332                             	.LCFI4:
 146:../src/Prac7.c **** 	//TODO: write your code here
 147:../src/Prac7.c **** 	int i;
 148:../src/Prac7.c **** 	int j;
 149:../src/Prac7.c **** 	int N = 8;
 333                             		.loc 1 149 0
 334 01c2 30 08 00                		movw	ax, #8
 335 01c5 B8 06                   		movw	[sp+6], ax
 150:../src/Prac7.c **** 
 151:../src/Prac7.c **** 	for(i = 0; i < N; i++)
 336                             		.loc 1 151 0
 337 01c7 F6                      		clrw	ax
 338 01c8 B8 0A                   		movw	[sp+10], ax
 339 01ca EC 34 02 00             		br	!!.L13
 340                             	.L17:
 152:../src/Prac7.c **** 	{
 153:../src/Prac7.c **** 		for(j = 0; j < N; j++)
 341                             		.loc 1 153 0
 342 01ce F6                      		clrw	ax
 343 01cf B8 08                   		movw	[sp+8], ax
 344 01d1 EC 1C 02 00             		br	!!.L14
 345                             	.L16:
 346                             	.LBB2:
 154:../src/Prac7.c **** 		{
 155:../src/Prac7.c **** 			if(studentNumber[i] > studentNumber[j])
 347                             		.loc 1 155 0
 348 01d5 A8 0A                   		movw	ax, [sp+10]
 349 01d7 BD F0                   		movw	r8, ax
 350 01d9 A8 10                   		movw	ax, [sp+16]
 351 01db 06 F0                   		addw	ax, r8
 352 01dd BD F0                   		movw	r8, ax
 353 01df BD F4                   		movw	r12, ax
 354 01e1 FA F4                   		movw	hl, r12
 355 01e3 8B                      		mov	a, [hl]
 356 01e4 9D F2                   		mov	r10, a
 357 01e6 A8 08                   		movw	ax, [sp+8]
 358 01e8 BD F0                   		movw	r8, ax
 359 01ea A8 10                   		movw	ax, [sp+16]
 360 01ec 06 F0                   		addw	ax, r8
 361 01ee BD F0                   		movw	r8, ax
 362 01f0 BD F4                   		movw	r12, ax
 363 01f2 FA F4                   		movw	hl, r12
 364 01f4 8B                      		mov	a, [hl]
 365 01f5 9D F0                   		mov	r8, a
 366 01f7 8D F2                   		mov	a, r10
 367 01f9 4B F0                   		cmp	a, r8
 368 01fb 61 E3                   		 skh
 369 01fd EC 17 02 00             		 br	!!.L15
 156:../src/Prac7.c **** 				swap(i, j, studentNumber);
 370                             		.loc 1 156 0
 371 0201 A8 0A                   		movw	ax, [sp+10]
 372 0203 BD F0                   		movw	r8, ax
 373 0205 B8 00                   		movw	[sp], ax
 374 0207 A8 08                   		movw	ax, [sp+8]
 375 0209 BD F0                   		movw	r8, ax
 376 020b B8 02                   		movw	[sp+2], ax
 377 020d A8 10                   		movw	ax, [sp+16]
 378 020f BD F0                   		movw	r8, ax
 379 0211 B8 04                   		movw	[sp+4], ax
 380 0213 FC 00 00 00             		call	!!%code(_swap)
 381                             	.L15:
 382                             	.LBE2:
 153:../src/Prac7.c **** 		for(j = 0; j < N; j++)
 383                             		.loc 1 153 0
 384 0217 A8 08                   		movw	ax, [sp+8]
 385 0219 A1                      		incw	ax
 386 021a B8 08                   		movw	[sp+8], ax
 387                             	.L14:
 153:../src/Prac7.c **** 		for(j = 0; j < N; j++)
 388                             		.loc 1 153 0 is_stmt 0 discriminator 1
 389 021c A8 06                   		movw	ax, [sp+6]
 390 021e BD F0                   		movw	r8, ax
 391 0220 A8 08                   		movw	ax, [sp+8]
 392 0222 46 F0                   		cmpw	ax, r8
 393 0224 71 FF                   		 xor1	CY, a.7
 394 0226 71 77 F1                		 xor1	CY, r9.7
 395 0229 61 D8                   		 sknc
 396 022b EC D5 01 00             		 br	!!.L16
 151:../src/Prac7.c **** 	for(i = 0; i < N; i++)
 397                             		.loc 1 151 0 is_stmt 1
 398 022f A8 0A                   		movw	ax, [sp+10]
 399 0231 A1                      		incw	ax
 400 0232 B8 0A                   		movw	[sp+10], ax
 401                             	.L13:
 151:../src/Prac7.c **** 	for(i = 0; i < N; i++)
 402                             		.loc 1 151 0 is_stmt 0 discriminator 1
 403 0234 A8 06                   		movw	ax, [sp+6]
 404 0236 BD F0                   		movw	r8, ax
 405 0238 A8 0A                   		movw	ax, [sp+10]
 406 023a 46 F0                   		cmpw	ax, r8
 407 023c 71 FF                   		 xor1	CY, a.7
 408 023e 71 77 F1                		 xor1	CY, r9.7
 409 0241 61 D8                   		 sknc
 410 0243 EC CE 01 00             		 br	!!.L17
 157:../src/Prac7.c **** 		}
 158:../src/Prac7.c **** 	}
 159:../src/Prac7.c **** }
 411                             		.loc 1 159 0 is_stmt 1
 412 0247 10 0C                   		addw	sp, #12
 413 0249 D7                      		ret
 414                             	.LFE4:
 416                             		.global	_swap
 418                             	_swap:
 419                             	.LFB5:
 160:../src/Prac7.c **** 
 161:../src/Prac7.c **** void swap(int first, int second, char* array)
 162:../src/Prac7.c **** {
 420                             		.loc 1 162 0
 421                             		; start of function
 422                             		; locals: 2 bytes
 423 024a 20 02                   		subw	sp, #2
 424                             	.LCFI5:
 163:../src/Prac7.c **** 	char temp = array[first];
 425                             		.loc 1 163 0
 426 024c A8 06                   		movw	ax, [sp+6]
 427 024e BD F0                   		movw	r8, ax
 428 0250 A8 0A                   		movw	ax, [sp+10]
 429 0252 06 F0                   		addw	ax, r8
 430 0254 BD F0                   		movw	r8, ax
 431 0256 BD F2                   		movw	r10, ax
 432 0258 FA F2                   		movw	hl, r10
 433 025a 8B                      		mov	a, [hl]
 434 025b 9D F0                   		mov	r8, a
 435 025d 98 01                   		mov	[sp+1], a
 164:../src/Prac7.c **** 	array[first] = array[second];
 436                             		.loc 1 164 0
 437 025f A8 06                   		movw	ax, [sp+6]
 438 0261 BD F0                   		movw	r8, ax
 439 0263 A8 0A                   		movw	ax, [sp+10]
 440 0265 06 F0                   		addw	ax, r8
 441 0267 BD F0                   		movw	r8, ax
 442 0269 A8 08                   		movw	ax, [sp+8]
 443 026b BD F2                   		movw	r10, ax
 444 026d A8 0A                   		movw	ax, [sp+10]
 445 026f 06 F2                   		addw	ax, r10
 446 0271 BD F2                   		movw	r10, ax
 447 0273 BD F4                   		movw	r12, ax
 448 0275 FA F4                   		movw	hl, r12
 449 0277 8B                      		mov	a, [hl]
 450 0278 9D F2                   		mov	r10, a
 451 027a AD F0                   		movw	ax, r8
 452 027c BD F4                   		movw	r12, ax
 453 027e DA F4                   		movw	bc, r12
 454 0280 8D F2                   		mov	a, r10
 455 0282 48 00 00                		mov	[bc], a
 165:../src/Prac7.c **** 	array[second] = temp;
 456                             		.loc 1 165 0
 457 0285 A8 08                   		movw	ax, [sp+8]
 458 0287 BD F0                   		movw	r8, ax
 459 0289 A8 0A                   		movw	ax, [sp+10]
 460 028b 06 F0                   		addw	ax, r8
 461 028d BD F0                   		movw	r8, ax
 462 028f 88 01                   		mov	a, [sp+1]
 463 0291 9D F2                   		mov	r10, a
 464 0293 AD F0                   		movw	ax, r8
 465 0295 BD F4                   		movw	r12, ax
 466 0297 DA F4                   		movw	bc, r12
 467 0299 8D F2                   		mov	a, r10
 468 029b 48 00 00                		mov	[bc], a
 166:../src/Prac7.c **** }
 469                             		.loc 1 166 0
 470 029e 10 02                   		addw	sp, #2
 471 02a0 D7                      		ret
 472                             	.LFE5:
 564                             	.Letext0:
 565                             		.file 2 "../src/iodefine.h"
